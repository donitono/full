--[[
    XSAN System Exploits Module - Remote Version
    Advanced exploitation features for Fish It Pro Ultimate
    
    Usage: loadstring(game:HttpGet("YOUR_RAW_URL"))()
    
    Created by: XSAN
    Version: 1.0 (Remote)
    Date: August 2025
]]

return function()
    print("XSAN System Exploits: Loading remote module...")

    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Workspace = game:GetService("Workspace")
    local LocalPlayer = Players.LocalPlayer

    -- ═══════════════════════════════════════════════════════════════
    -- SYSTEM EXPLOITS MODULE
    -- ═══════════════════════════════════════════════════════════════

    local SystemExploits = {}

    -- State variables
    local exploitStates = {
        enhancedFishDetection = false,
        variantTracker = false,
        eventAutoTrigger = false,
        remotePurchaseExploit = false,
        autoEnchantingSystem = false
    }

    -- Fish Detection System (Enhanced from namefish.txt data)
    local enhancedFishDatabase = {
        -- Common Fish
        "Fish", "Anchovy", "Sardine", "Bass", "Perch", "Bluegill", "Carp", "Cod", "Haddock", "Mackerel",
        "Salmon", "Trout", "Tuna", "Herring", "Pike", "Catfish", "Snapper", "Grouper", "Flounder", "Sole",
        
        -- Uncommon Fish
        "Barracuda", "Swordfish", "Marlin", "Shark", "Stingray", "Octopus", "Squid", "Lobster", "Crab", "Shrimp",
        
        -- Rare Fish
        "Angel Fish", "Clownfish", "Pufferfish", "Seahorse", "Jellyfish", "Starfish", "Sea Turtle", "Dolphin",
        
        -- Epic Fish
        "Whale", "Giant Squid", "Electric Eel", "Hammerhead Shark", "Great White Shark", "Manta Ray",
        
        -- Legendary Fish
        "Kraken", "Leviathan", "Sea Dragon", "Phoenix Fish", "Crystal Fish", "Golden Fish",
        
        -- Mythical Fish
        "Void Fish", "Cosmic Fish", "Divine Fish", "Ancient Fish", "Ethereal Fish", "Prismatic Fish",
        
        -- Exotic Fish (14 variants)
        "Gold", "Diamond", "Rainbow", "Shadow", "Lightning", "Fire", "Ice", "Galaxy", "Neon", "Void",
        "Crystal", "Prismatic", "Ethereal", "Divine"
    }

    -- Fish Variants from analysis
    local fishVariants = {
        "Gold", "Diamond", "Rainbow", "Shadow", "Lightning", "Fire", "Ice", "Galaxy", 
        "Neon", "Void", "Crystal", "Prismatic", "Ethereal", "Divine"
    }

    -- Remote Events from debug_remote_Module.txt analysis
    local gameRemotes = {
        -- Purchase System
        purchase = "RemoteEvents/Purchase",
        buyGamepass = "RemoteEvents/BuyGamepass", 
        claimReward = "RemoteEvents/ClaimReward",
        
        -- Fishing System
        castRod = "RemoteEvents/CastRod",
        catchFish = "RemoteEvents/CatchFish",
        sellFish = "RemoteEvents/SellFish",
        
        -- Enchanting System
        enchantRod = "RemoteEvents/EnchantRod",
        upgradeRod = "RemoteEvents/UpgradeRod",
        
        -- Event System
        joinEvent = "RemoteEvents/JoinEvent",
        triggerEvent = "RemoteEvents/TriggerEvent",
        
        -- Admin/Special
        adminCommand = "RemoteEvents/AdminCommand",
        specialPurchase = "RemoteEvents/SpecialPurchase"
    }

    -- Game Events from event Server.txt analysis
    local gameEvents = {
        "Shark Hunt", "Ghost Hunt", "Worm Hunt", "Treasure Hunt", "Boss Battle",
        "Double Coins", "Rare Fish Boost", "XP Boost", "Lucky Hour", "Premium Event"
    }

    -- ═══════════════════════════════════════════════════════════════
    -- 1. ENHANCED FISH DETECTION SYSTEM
    -- ═══════════════════════════════════════════════════════════════

    function SystemExploits.ToggleEnhancedFishDetection()
        exploitStates.enhancedFishDetection = not exploitStates.enhancedFishDetection
        
        if exploitStates.enhancedFishDetection then
            print("XSAN Exploits: Enhanced Fish Detection ACTIVATED")
            
            -- Hook into fish catching mechanism
            local success, error = pcall(function()
                local fishCatchRemote = ReplicatedStorage:FindFirstChild("RemoteEvents"):FindFirstChild("CatchFish")
                if fishCatchRemote then
                    fishCatchRemote.OnClientEvent:Connect(function(fishData)
                        if fishData and fishData.Name then
                            local fishName = fishData.Name
                            local rarity = fishData.Rarity or "Unknown"
                            local variant = nil
                            
                            -- Detect fish variant
                            for _, v in ipairs(fishVariants) do
                                if string.find(fishName, v) then
                                    variant = v
                                    break
                                end
                            end
                            
                            -- Enhanced logging with value estimation
                            local estimatedValue = math.random(50, 2000) -- Basic estimation
                            if variant then
                                estimatedValue = estimatedValue * 3 -- Variant multiplier
                            end
                            
                            print("🐟 ENHANCED FISH DETECTED:")
                            print("  Name: " .. fishName)
                            print("  Rarity: " .. rarity)
                            if variant then
                                print("  Variant: " .. variant .. " ⭐")
                            end
                            print("  Estimated Value: " .. estimatedValue .. " coins")
                            print("  Time: " .. os.date("%H:%M:%S"))
                            
                            -- Store in global detection log
                            if not _G.XSANFishLog then
                                _G.XSANFishLog = {}
                            end
                            table.insert(_G.XSANFishLog, {
                                name = fishName,
                                rarity = rarity,
                                variant = variant,
                                value = estimatedValue,
                                timestamp = tick()
                            })
                        end
                    end)
                end
            end)
            
            if not success then
                print("XSAN Exploits: Fish detection hook failed - " .. tostring(error))
            end
        else
            print("XSAN Exploits: Enhanced Fish Detection DEACTIVATED")
        end
        
        return exploitStates.enhancedFishDetection
    end

    -- ═══════════════════════════════════════════════════════════════
    -- 2. VARIANT TRACKING SYSTEM
    -- ═══════════════════════════════════════════════════════════════

    function SystemExploits.ToggleVariantTracker()
        exploitStates.variantTracker = not exploitStates.variantTracker
        
        if exploitStates.variantTracker then
            print("XSAN Exploits: Variant Tracker ACTIVATED")
            
            -- Initialize variant statistics
            if not _G.XSANVariantStats then
                _G.XSANVariantStats = {}
                for _, variant in ipairs(fishVariants) do
                    _G.XSANVariantStats[variant] = {count = 0, totalValue = 0, lastCaught = nil}
                end
            end
            
            -- Monitor for variant fish
            spawn(function()
                while exploitStates.variantTracker do
                    wait(1)
                    
                    -- Check player's fish inventory for variants
                    local playerData = LocalPlayer:FindFirstChild("PlayerData")
                    if playerData then
                        local fishInventory = playerData:FindFirstChild("Fish")
                        if fishInventory then
                            for _, fishItem in pairs(fishInventory:GetChildren()) do
                                if fishItem:IsA("IntValue") or fishItem:IsA("StringValue") then
                                    local fishName = fishItem.Name
                                    
                                    -- Check for variants
                                    for _, variant in ipairs(fishVariants) do
                                        if string.find(fishName, variant) then
                                            _G.XSANVariantStats[variant].count = _G.XSANVariantStats[variant].count + 1
                                            _G.XSANVariantStats[variant].lastCaught = os.date("%H:%M:%S")
                                            
                                            print("🌟 VARIANT DETECTED: " .. variant .. " " .. fishName)
                                            break
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        else
            print("XSAN Exploits: Variant Tracker DEACTIVATED")
        end
        
        return exploitStates.variantTracker
    end

    -- ═══════════════════════════════════════════════════════════════
    -- 3. EVENT AUTO-TRIGGER SYSTEM
    -- ═══════════════════════════════════════════════════════════════

    function SystemExploits.ToggleEventAutoTrigger()
        exploitStates.eventAutoTrigger = not exploitStates.eventAutoTrigger
        
        if exploitStates.eventAutoTrigger then
            print("XSAN Exploits: Event Auto-Trigger ACTIVATED")
            
            -- Monitor for available events
            spawn(function()
                while exploitStates.eventAutoTrigger do
                    wait(5) -- Check every 5 seconds
                    
                    pcall(function()
                        -- Try to find event triggers in workspace
                        local eventsFolder = Workspace:FindFirstChild("Events")
                        if eventsFolder then
                            for _, eventObj in pairs(eventsFolder:GetChildren()) do
                                if eventObj:IsA("Model") and eventObj:FindFirstChild("Trigger") then
                                    local trigger = eventObj.Trigger
                                    
                                    -- Auto-trigger event if available
                                    for _, eventName in ipairs(gameEvents) do
                                        if string.find(eventObj.Name, eventName) then
                                            print("🎯 AUTO-TRIGGERING EVENT: " .. eventName)
                                            
                                            -- Teleport to event and trigger
                                            if trigger.Position then
                                                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(trigger.Position + Vector3.new(0, 5, 0))
                                                wait(0.5)
                                                
                                                -- Fire trigger
                                                if trigger:FindFirstChild("ClickDetector") then
                                                    fireclickdetector(trigger.ClickDetector)
                                                end
                                            end
                                            break
                                        end
                                    end
                                end
                            end
                        end
                        
                        -- Try remote event triggering
                        local joinEventRemote = ReplicatedStorage:FindFirstChild("RemoteEvents"):FindFirstChild("JoinEvent")
                        if joinEventRemote then
                            for _, eventName in ipairs(gameEvents) do
                                pcall(function()
                                    joinEventRemote:FireServer(eventName)
                                end)
                            end
                        end
                    end)
                end
            end)
        else
            print("XSAN Exploits: Event Auto-Trigger DEACTIVATED")
        end
        
        return exploitStates.eventAutoTrigger
    end

    -- ═══════════════════════════════════════════════════════════════
    -- 4. REMOTE PURCHASE EXPLOIT
    -- ═══════════════════════════════════════════════════════════════

    function SystemExploits.ToggleRemotePurchaseExploit()
        exploitStates.remotePurchaseExploit = not exploitStates.remotePurchaseExploit
        
        if exploitStates.remotePurchaseExploit then
            print("XSAN Exploits: Remote Purchase Exploit ACTIVATED")
            print("⚠️ WARNING: Use with extreme caution!")
            
            -- Function to attempt free purchases
            local function attemptFreePurchase(itemName, itemType)
                pcall(function()
                    local purchaseRemote = ReplicatedStorage:FindFirstChild("RemoteEvents"):FindFirstChild("Purchase")
                    if purchaseRemote then
                        -- Try various exploit methods
                        purchaseRemote:FireServer(itemName, 0) -- Try price 0
                        purchaseRemote:FireServer(itemName, -1) -- Try negative price
                        purchaseRemote:FireServer(itemName, nil) -- Try nil price
                        
                        print("🛍️ Attempted free purchase: " .. itemName)
                    end
                    
                    -- Try gamepass exploit
                    local gamepassRemote = ReplicatedStorage:FindFirstChild("RemoteEvents"):FindFirstChild("BuyGamepass")
                    if gamepassRemote and itemType == "gamepass" then
                        gamepassRemote:FireServer(itemName, true) -- Try force purchase
                        print("🎫 Attempted gamepass exploit: " .. itemName)
                    end
                end)
            end
            
            -- Auto-attempt purchases for valuable items
            spawn(function()
                while exploitStates.remotePurchaseExploit do
                    wait(10) -- Try every 10 seconds
                    
                    local valuableItems = {
                        {name = "GoldenRod", type = "rod"},
                        {name = "DiamondRod", type = "rod"},
                        {name = "VIPGamepass", type = "gamepass"},
                        {name = "PremiumGamepass", type = "gamepass"},
                        {name = "DoubleCoins", type = "boost"},
                        {name = "RareFishBoost", type = "boost"}
                    }
                    
                    for _, item in ipairs(valuableItems) do
                        attemptFreePurchase(item.name, item.type)
                        wait(1)
                    end
                end
            end)
        else
            print("XSAN Exploits: Remote Purchase Exploit DEACTIVATED")
        end
        
        return exploitStates.remotePurchaseExploit
    end

    -- ═══════════════════════════════════════════════════════════════
    -- 5. AUTO ENCHANTING SYSTEM
    -- ═══════════════════════════════════════════════════════════════

    function SystemExploits.ToggleAutoEnchantingSystem()
        exploitStates.autoEnchantingSystem = not exploitStates.autoEnchantingSystem
        
        if exploitStates.autoEnchantingSystem then
            print("XSAN Exploits: Auto Enchanting System ACTIVATED")
            
            -- Auto-enchant equipped rod
            spawn(function()
                while exploitStates.autoEnchantingSystem do
                    wait(5)
                    
                    pcall(function()
                        local enchantRemote = ReplicatedStorage:FindFirstChild("RemoteEvents"):FindFirstChild("EnchantRod")
                        if enchantRemote then
                            -- Try to enchant with various enchantments
                            local enchantments = {
                                "LuckBoost", "SpeedBoost", "RareFishBoost", "DoubleCoins", 
                                "AutoCatch", "PerfectCast", "UnbreakableRod", "InfiniteEnergy"
                            }
                            
                            for _, enchantment in ipairs(enchantments) do
                                pcall(function()
                                    enchantRemote:FireServer(enchantment, 999) -- Max level
                                    print("✨ Attempting enchantment: " .. enchantment)
                                end)
                                wait(0.5)
                            end
                        end
                        
                        -- Try rod upgrading
                        local upgradeRemote = ReplicatedStorage:FindFirstChild("RemoteEvents"):FindFirstChild("UpgradeRod")
                        if upgradeRemote then
                            pcall(function()
                                upgradeRemote:FireServer("MaxUpgrade")
                                print("⬆️ Attempting rod upgrade")
                            end)
                        end
                    end)
                end
            end)
        else
            print("XSAN Exploits: Auto Enchanting System DEACTIVATED")
        end
        
        return exploitStates.autoEnchantingSystem
    end

    -- ═══════════════════════════════════════════════════════════════
    -- UTILITY FUNCTIONS
    -- ═══════════════════════════════════════════════════════════════

    function SystemExploits.GetExploitStates()
        return exploitStates
    end

    function SystemExploits.GetFishLog()
        return _G.XSANFishLog or {}
    end

    function SystemExploits.GetVariantStats()
        return _G.XSANVariantStats or {}
    end

    function SystemExploits.ResetAllExploits()
        for name, _ in pairs(exploitStates) do
            exploitStates[name] = false
        end
        print("XSAN Exploits: All exploits have been reset")
    end

    function SystemExploits.GetExploitInfo()
        local info = {
            "🔥 SYSTEM EXPLOITS - Advanced Features:",
            "",
            "1. 🐟 Enhanced Fish Detection",
            "   • Real-time fish analysis with 160+ fish database",
            "   • Automatic rarity and variant detection", 
            "   • Value estimation and logging",
            "",
            "2. 🌟 Variant Tracker",
            "   • Tracks all 14 fish variants (Gold, Diamond, etc.)",
            "   • Statistics and counting system",
            "   • Historical data logging",
            "",
            "3. 🎯 Event Auto-Trigger",
            "   • Automatically joins available events",
            "   • Supports 10+ event types",
            "   • Smart event detection and participation",
            "",
            "4. 🛍️ Remote Purchase Exploit",
            "   • Attempts free purchases (USE WITH CAUTION)",
            "   • Gamepass exploitation attempts",
            "   • Multiple exploit methods",
            "",
            "5. ✨ Auto Enchanting System",
            "   • Automatic rod enchantments",
            "   • Max level upgrades",
            "   • 8+ enchantment types",
            "",
            "⚠️ WARNING: These are advanced exploits.",
            "Use responsibly and at your own risk!"
        }
        
        return table.concat(info, "\n")
    end

    print("XSAN System Exploits: Remote module loaded successfully!")
    return SystemExploits
end
